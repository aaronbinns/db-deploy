{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates all AWS resources needed for a Databricks workspace, including Unity Catalog managed storage.",
    "Parameters": {
        "ExternalID": {
            "Description": "Your Databricks E2 account ID",
            "MinLength": "1",
            "Type": "String"
        }
    },
    "Conditions": {
        "Has3Subnets": {
            "Fn::Not": [ { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-1" ] } ]
        },
        "Has4Subnets": {
            "Fn::Or": [ { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-northeast-2" ] },
			{ "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-2"      ] },
			{ "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1"      ] }
		      ]
        },
        "Has5Subnets": {
            "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]
        },
        "Has6Subnets": {
            "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ]
        },
	"DoKinesisVPCEntpoint": {
	    "Fn::Not": [ { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-2" ] } ]
	}
    },
    "Resources": {
        "WorkspaceStorage": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            { "Ref": "AWS::StackName" },
                            "workspace-storage",
                            { "Fn::Select": [ 0, { "Fn::Split": [ "-", { "Fn::Select": [ 2, { "Fn::Split" : [ "/" , { "Ref": "AWS::StackId" } ] } ] } ] } ] }
                        ]
                    ]
                }
            }
        },
        "WorkspaceStoragePolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Databricks control plane access to workspace storage",
                            "Effect": "Allow",
                            "Principal": { "AWS": "arn:aws:iam::414351767826:root" },
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:ListBucket",
                                "s3:GetBucketLocation"
                            ],
                            "Resource": [
                                { "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}/*" },
                                { "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}"   }
                            ],
			    "Condition": { "StringEquals": { "aws:PrincipalTag/DatabricksAccountId": { "Ref": "ExternalID" } } }
                        },
			{
			    "Sid": "Prevent Databricks control plane from accessing Unity Catalog storage",
			    "Effect": "Deny",
			    "Principal": { "AWS": "arn:aws:iam::414351767826:root" },
			    "Action": "s3:*",
			    "Resource": [
                                { "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}/__unitystorage/*" },
                                { "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}/__unitystorage"   }
			    ]
			}
                    ]
                },
                "Bucket": { "Ref": "WorkspaceStorage" }
            }
        },
        "CrossAccountAccessRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "cross-account" ] ] },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Condition": { "StringEquals": { "sts:ExternalId": { "Ref": "ExternalID" } } },
                            "Effect": "Allow",
                            "Principal": { "AWS": { "Fn::Join": [ "", [ "arn:aws:iam::", "414351767826", ":root" ] ] } },
                            "Sid": ""
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "cross-account" ] ] },
			"PolicyDocument":
			{
			    "Version": "2012-10-17",
			    "Statement": [
				{
				    "Sid": "Stmt1403287045000",
				    "Effect": "Allow",
				    "Action": [
					"ec2:AssociateIamInstanceProfile",
					"ec2:AttachVolume",
					"ec2:AuthorizeSecurityGroupEgress",
					"ec2:AuthorizeSecurityGroupIngress",
					"ec2:CancelSpotInstanceRequests",
					"ec2:CreateTags",
					"ec2:CreateVolume",
					"ec2:DeleteTags",
					"ec2:DeleteVolume",
					"ec2:DescribeAvailabilityZones",
					"ec2:DescribeIamInstanceProfileAssociations",
					"ec2:DescribeInstanceStatus",
					"ec2:DescribeInstances",
					"ec2:DescribeInternetGateways",
					"ec2:DescribeNatGateways",
					"ec2:DescribeNetworkAcls",
					"ec2:DescribePrefixLists",
					"ec2:DescribeReservedInstancesOfferings",
					"ec2:DescribeRouteTables",
					"ec2:DescribeSecurityGroups",
					"ec2:DescribeSpotInstanceRequests",
					"ec2:DescribeSpotPriceHistory",
					"ec2:DescribeSubnets",
					"ec2:DescribeVolumes",
					"ec2:DescribeVpcAttribute",
					"ec2:DescribeVpcs",
					"ec2:DetachVolume",
					"ec2:DisassociateIamInstanceProfile",
					"ec2:ReplaceIamInstanceProfileAssociation",
					"ec2:RequestSpotInstances",
					"ec2:RevokeSecurityGroupEgress",
					"ec2:RevokeSecurityGroupIngress",
					"ec2:RunInstances",
					"ec2:TerminateInstances",
					"ec2:DescribeFleetHistory",
					"ec2:ModifyFleet",
					"ec2:DeleteFleets",
					"ec2:DescribeFleetInstances",
					"ec2:DescribeFleets",
					"ec2:CreateFleet",
					"ec2:DeleteLaunchTemplate",
					"ec2:GetLaunchTemplateData",
					"ec2:CreateLaunchTemplate",
					"ec2:DescribeLaunchTemplates",
					"ec2:DescribeLaunchTemplateVersions",
					"ec2:ModifyLaunchTemplate",
					"ec2:DeleteLaunchTemplateVersions",
					"ec2:CreateLaunchTemplateVersion",
					"ec2:AssignPrivateIpAddresses",
					"ec2:GetSpotPlacementScores"
				    ],
				    "Resource": [
					"*"
				    ]
				},
				{
				    "Effect": "Allow",
				    "Action": [
					"iam:CreateServiceLinkedRole",
					"iam:PutRolePolicy"
				    ],
				    "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot",
				    "Condition": {
					"StringLike": {
					    "iam:AWSServiceName": "spot.amazonaws.com"
					}
				    }
				}
			    ]
			}
                    }
                ]
            }
        },

	"UnityCatalogStorageCredentialRole": {
	    "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "unity-catalog-storage-role" ] ] },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Principal": {
				"AWS": [
				    { "Fn::Join": [ "", [ "arn:aws:iam::", "414351767826", ":role/unity-catalog-prod-UCMasterRole-14S5ZJVKOTYTL" ] ] }
				]
			    },
                            "Condition": { "StringEquals": { "sts:ExternalId": { "Ref": "ExternalID" } } }
                        },
                        {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Principal": {
				"AWS": [
				    { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root" ] ] }
				]
			    },
                            "Condition": { "StringEquals": { "AWS:PrincpalArn":
							     { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/",
										   { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "unity-catalog-storage-role" ] ] }
										 ]
									   ]
							     }
							   }
					 }
                        } 
                    ]
                }
            }
	},
	"UnityCatalogStorageCredentialPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
		"PolicyName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "unity-catalog-storage-role" ] ] },
		"PolicyDocument": {
		    "Version" : "2012-10-17",
		    "Statement":
		    [
			{
			    "Effect": "Allow",
			    "Action": [
				"s3:GetObject",
				"s3:PutObject",
				"s3:DeleteObject",
				"s3:ListBucket",
				"s3:GetBucketLocation"
			    ],
			    "Resource": [
				{ "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}/*" },
				{ "Fn::Sub": "arn:aws:s3:::${WorkspaceStorage}"   }
			    ]
			},
			{
			    "Effect": "Allow",
			    "Action": [
				"sts:AssumeRole"
			    ],
			    "Resource": [
				{ "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/",
						      { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "unity-catalog-storage-role" ] ] }
						    ]
					      ]
				}

			    ]
			}
		    ]
		},
		"Roles": [ {
		    "Ref": "UnityCatalogStorageCredentialRole"
		} ]
            }
	},

	"VPC":
        {
            "Type": "AWS::EC2::VPC",
            "Properties":
            {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true
            }
        },
        "SubnetNAT":
        {
            "Type": "AWS::EC2::Subnet",
            "Properties":
            {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-nat", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "CidrBlock": "10.0.224.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
		"Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.0.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
		"Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 1, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 1, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.32.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "Has3Subnets",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 2, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 2, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.64.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetD": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "Has4Subnets",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 3, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 3, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.96.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetE": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "Has5Subnets",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 4, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 4, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.128.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SubnetF": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "Has6Subnets",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-${az}", { "basename": { "Ref": "AWS::StackName" }, "az": { "Fn::Select": [ 5, { "Fn::GetAZs": "" } ] } } ] } } ],
                "AvailabilityZone": { "Fn::Select": [ 5, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.160.0/19",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": { "Ref": "IGW" },
                "VpcId": { "Ref": "VPC" }
            }
        },
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ]
            }
        },
        "NATGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "AllocationId": { "Fn::GetAtt": [ "EIP", "AllocationId" ] },
                "SubnetId": { "Ref": "SubnetNAT" }
            }
        },
        "RouteTableNAT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-public", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "VpcId": { "Ref": "VPC" }
            }
        },
        "RouteNAT": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "IGW" },
                "RouteTableId": { "Ref": "RouteTableNAT" }
            }
        },
        "SubnetRouteTableAssociationNAT": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "SubnetNAT" },
                "RouteTableId": { "Ref": "RouteTableNAT" }
            }
        },
        "RouteTablePrivate": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}-private", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "VpcId": { "Ref": "VPC" }
            }
        },
        "RoutePrivate": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": { "Ref": "NATGateway" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetA" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetB" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "Has3Subnets",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetC" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationD": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "Has4Subnets",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetD" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationE": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "Has5Subnets",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetE" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "SubnetRouteTableAssociationF": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "Has6Subnets",
            "Properties": {
                "SubnetId":     { "Ref": "SubnetF" },
                "RouteTableId": { "Ref": "RouteTablePrivate" }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "VpcId": { "Ref": "VPC" }
            }
        },
        "NetworkAclEntryInboundAllow": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "Protocol": -1,
                "RuleNumber": 100,
                "RuleAction": "ALLOW",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "NetworkAclEntryOutboundAllow": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "Protocol": -1,
                "RuleNumber": 100,
                "RuleAction": "ALLOW",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetNetworkAclNAT": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetNAT" }
            }
        },
        "SubnetNetworkAclA": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetA" }
            }
        },
        "SubnetNetworkAclB": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetB" }
            }
        },
        "SubnetNetworkAclC": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Condition": "Has3Subnets",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetC" }
            }
        },
        "SubnetNetworkAclD": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Condition": "Has4Subnets",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetD" }
            }
        },
        "SubnetNetworkAclE": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Condition": "Has5Subnets",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetE" }
            }
        },
        "SubnetNetworkAclF": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Condition": "Has6Subnets",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "SubnetId":     { "Ref": "SubnetF" }
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": [ "${basename}", { "basename": { "Ref": "AWS::StackName" } } ] } } ],
                "GroupDescription": "Databricks security group",
                "GroupName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "security-group" ] ] },
                "VpcId": { "Ref": "VPC" }
            }
        },
        "SecurityGroupIngressTcp": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "SourceSecurityGroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 0,
                "ToPort": 65535
            }
        },
        "SecurityGroupIngressUdp": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "SourceSecurityGroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "udp",
                "FromPort": 0,
                "ToPort": 65535
            }
        },
        "SecurityGroupEgressAll": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "-1"
            }
        },
        "VPCEndpointS3": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.s3" },
		"VpcEndpointType": "Gateway",
                "VpcId": { "Ref": "VPC" },
                "RouteTableIds": [ { "Ref": "RouteTablePrivate" } ]
            }
        },
        "VPCEndpointSTS": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.sts" },
		"VpcEndpointType": "Interface",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
		"SubnetIds": [
 		    { "Ref" : "SubnetA" },
 		    { "Ref" : "SubnetB" },
		    { "Fn::If": [ "Has3Subnets", { "Ref" : "SubnetC" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has4Subnets", { "Ref" : "SubnetD" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has5Subnets", { "Ref" : "SubnetE" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has6Subnets", { "Ref" : "SubnetF" },	{ "Ref" : "AWS::NoValue" } ] }
		]
            }
        },
        "VPCEndpointKinesisStreams": {
	    "Condition": "DoKinesisVPCEntpoint",
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": { "Fn::Sub": "com.amazonaws.${AWS::Region}.kinesis-streams" },
		"VpcEndpointType": "Interface",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
		"SubnetIds": [
 		    { "Ref" : "SubnetA" },
 		    { "Ref" : "SubnetB" },
		    { "Fn::If": [ "Has3Subnets", { "Ref" : "SubnetC" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has4Subnets", { "Ref" : "SubnetD" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has5Subnets", { "Ref" : "SubnetE" },	{ "Ref" : "AWS::NoValue" } ] },
		    { "Fn::If": [ "Has6Subnets", { "Ref" : "SubnetF" },	{ "Ref" : "AWS::NoValue" } ] }
		]
            }
        }
    },
    "Outputs": {
        "CrossAccountRole": {
            "Description": "The ARN of the cross account role for the Databricks Control Plane",
            "Value": { "Fn::GetAtt": [ "CrossAccountAccessRole", "Arn" ] }
        },
        
        "WorkspaceStorage": {
            "Description": "The name of the workspace storage S3 bucket",
            "Value": { "Ref": "WorkspaceStorage" }
        },

	"UnityCatalogStorageCredentialRole": {
	    "Description": "ARN to use for Unity Catalog storage credential",
	    "Value": { "Fn::GetAtt": [ "UnityCatalogStorageCredentialRole", "Arn" ] }
	},
        
        "VPCId"          : { "Description": "VPC ID"           , "Value": { "Ref": "VPC"           }                             },
        "SubnetAId"      : { "Description": "Subnet A ID"      , "Value": { "Ref": "SubnetA"       }                             },
        "SubnetBId"      : { "Description": "Subnet B ID"      , "Value": { "Ref": "SubnetB"       }                             },
        "SubnetCId"      : { "Description": "Subnet C ID"      , "Value": { "Ref": "SubnetC"       }, "Condition": "Has3Subnets" },
        "SubnetDId"      : { "Description": "Subnet D ID"      , "Value": { "Ref": "SubnetD"       }, "Condition": "Has4Subnets" },
        "SubnetEId"      : { "Description": "Subnet E ID"      , "Value": { "Ref": "SubnetE"       }, "Condition": "Has5Subnets" },
        "SubnetFId"      : { "Description": "Subnet F ID"      , "Value": { "Ref": "SubnetF"       }, "Condition": "Has6Subnets" },

        "SecurityGroupId": { "Description": "Security Group ID", "Value": { "Ref": "SecurityGroup" }                             }
        
    }
}
